Problem 1:

func sumArray(var A as array of length n)
    var sum as int = 0
    for i from 0 to n - 1
        sum += A[i]
    return sum
end func

Running time: O(n)
Explanation: Because it is running thru each element to add it to the sum.

----------------------------------------------------------------

Problem 2:

func sumMatrix(var A as n x n matrix) // A matrix can be represented as an array of arrays, from A[0][0] to A[n][n]
    var sum as int = 0
    for i from 0 to n - 1
        sum += sumArray(A[i])
    return sum
end func

Running time: O(n^2)
Explanation: The for loop itself is O(n) because it is accessing each array. Inside the loop, it is calling the previous method which itself is O(n). So O(n*n) is O(n^2).

----------------------------------------------------------------

Problem 3:

func countDivisionsByTwo(var n as int)
    var count as int = 0
    var i as int = n
    while i >= 1
        count++
        i = i / 2
    return count
end func

Running time: O(log n)
Explanation: This is because it is halving the value n till it reach 1, which it is half the operation of O(n).  

----------------------------------------------------------------

Problem 4:

func arrayMax(var A as array of length n)
    var currentMax as int = A[0]
    for i from 0 to n - 1
        if A[i] > currentMax then
            currentMax = A[i]
    return currentMax
end func

Running time: O(n)
Explanation: The loop is going to go thru the entire array regardless of what happen inside it. 

----------------------------------------------------------------

***BONUS*** Problem 5:

func bonusFunction(var n as int)
    var total as int = 0
    for i from 1 to n
        for j from 1 to n
            total += 1
        for k from 1 to 2 * n
            total += 1
            var m as int = 0
            while (m < 3 * n)
                total += 1
                m += 2
    return total
end func

Running time: O(n^3)
Explanation: The first for-loop with the variable i is O(n). 

(I'm ignoring the for-loop with variable j because that is basically O(n^2) which in the grand scheme of thing O(n^2+n^3) doesn't matter much)

The second for-loop with variable k is another O(n).

The third loop(while-loop) with variable m is basically 3/2n which can be simplify to O(n).

So all in all, O(n*n*n) => O(n^3). 
