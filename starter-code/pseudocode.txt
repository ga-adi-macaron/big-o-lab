Problem 1:

func sumArray(var A as array of length n)
    var sum as int = 0
    for i from 0 to n - 1
        sum += A[i]
    return sum
end func

Running time: O(n)
Explanation: 
Max Runtime can be no more than the number of elements.

----------------------------------------------------------------

Problem 2:

func sumMatrix(var A as n x n matrix) // A matrix can be represented as an array of arrays, from A[0][0] to A[n][n]
    var sum as int = 0
    for i from 0 to n - 1
        sum += sumArray(A[i])
    return sum
end func

Running time: O(n*n) = O(n^2)
Explanation: 
Max runtime is the number of arrays passed multiplied by the number of elements in each array which is occuring in method from problem 1.
----------------------------------------------------------------

Problem 3:

func countDivisionsByTwo(var n as int)
    var count as int = 0
    var i as int = n
    while i >= 1
        count++
        i = i / 2
    return count
end func

Running time: O(log n)
Explanation: 
Each iteration reduces the size of n by half, so it will take as long as how many times the value can be halved.

----------------------------------------------------------------

Problem 4:

func arrayMax(var A as array of length n)
    var currentMax as int = A[0]
    for i from 0 to n - 1
        if A[i] > currentMax then
            currentMax = A[i]
    return currentMax
end func

Running time: O(1+n) = O(n)
Explanation: 
The max value is retrieved at a constant rate, then we iterate through the entire array which takes linear time. We can simplify this to linear time.

----------------------------------------------------------------

***BONUS*** Problem 5:

func bonusFunction(var n as int)
    var total as int = 0
    for i from 1 to n
        for j from 1 to n
            total += 1
        for k from 1 to 2 * n
            total += 1
            var m as int = 0
            while (m < 3 * n)
                total += 1
                m += 2
    return total
end func

Running time: O(n *(2n+n) * 3n/2) = O(n*2n*n) = O(n*n*n) = O(n^3)=O(n^c)
Explanation: 
The outter-most for-loop runs in linear time, the two inner for-loops each run in linear time (comes out to 2n), the second of the inner for-loops contains a while-loop that runs in 1.5x linear time. Collapsing them onto themselves shows that this runs in n^c where c is the level of nested loops.
