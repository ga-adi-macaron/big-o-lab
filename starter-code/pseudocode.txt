Problem 1:

func sumArray(var A as array of length n)
    var sum as int = 0
    for i from 0 to n - 1
        sum += A[i]
    return sum
end func

Running time: Big O(n)
Explanation: It’s a linear operation that loops through an array and adds each number in the array to each other which depends on the length of the input

----------------------------------------------------------------

Problem 2:

func sumMatrix(var A as n x n matrix) // A matrix can be represented as an array of arrays, from A[0][0] to A[n][n]
    var sum as int = 0
    for i from 0 to n - 1
        sum += sumArray(A[i])
    return sum
end func

Running time: Big O(n^2)
Explanation: The func has a for loop and calls func sumArray which also has a for loop, therefore operating within a nested for loop

----------------------------------------------------------------

Problem 3:

func countDivisionsByTwo(var n as int)
    var count as int = 0
    var i as int = n
    while i >= 1
        count++
        i = i / 2
    return count
end func

Running time: Big O(n)
Explanation: It’s linear operation that takes in an int and returns how much how many times it is divisible by 2 while the number being divided next is greater than or equal to 1 which depends on how large or small of a number the input is

----------------------------------------------------------------

Problem 4:

func arrayMax(var A as array of length n)
    var currentMax as int = A[0]
    for i from 0 to n - 1
        if A[i] > currentMax then
            currentMax = A[i]
    return currentMax
end func

Running time: Big O(n)
Explanation: It’s a linear operation that loops through an array to find the max value starting at index 0 which depends on the length of the input

----------------------------------------------------------------

***BONUS*** Problem 5:

func bonusFunction(var n as int)
    var total as int = 0
    for i from 1 to n
        for j from 1 to n
            total += 1
        for k from 1 to 2 * n
            total += 1
            var m as int = 0
            while (m < 3 * n)
                total += 1
                m += 2
    return total
end func

Running time: Big O(n + n^2) = Big O(n^2)
Explanation: The func has multiple nested loops and is dependent on how large or small of a number the input is for the last while loop
