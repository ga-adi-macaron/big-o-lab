Problem 1:

func sumArray(var A as array of length n)
    var sum as int = 0
    for i from 0 to n - 1
        sum += A[i]
    return sum
end func

Running time: O(n)
Explanation: It loops through the array once.

----------------------------------------------------------------

Problem 2:

func sumMatrix(var A as n x n matrix) // A matrix can be represented as an array of arrays, from A[0][0] to A[n][n]
    var sum as int = 0
    for i from 0 to n - 1
        sum += sumArray(A[i])
    return sum
end func

Running time: O(n^2)
Explanation: As it runs through the array of arrays, it calls another method that runs through the array at the first array's index. So it's practically a nested for loop.

----------------------------------------------------------------

Problem 3:

func countDivisionsByTwo(var n as int)
    var count as int = 0
    var i as int = n
    while i >= 1
        count++
        i = i / 2
    return count
end func

Running time: O(log n)
Explanation: As the integer increases at a constant amount, the amount of times it runs through the loop is less than that constant amount. If you keep doubling the integer, each time it will only add one extra step. Hard to explain haha.

----------------------------------------------------------------

Problem 4:

func arrayMax(var A as array of length n)
    var currentMax as int = A[0]
    for i from 0 to n - 1
        if A[i] > currentMax then
            currentMax = A[i]
    return currentMax
end func

Running time: O(n)
Explanation: It only runs through the loop once.

----------------------------------------------------------------

***BONUS*** Problem 5:

func bonusFunction(var n as int)
    var total as int = 0
    for i from 1 to n
        for j from 1 to n
            total += 1
        for k from 1 to 2 * n
            total += 1
            var m as int = 0
            while (m < 3 * n)
                total += 1
                m += 2
    return total
end func

Running time: O(n^3)
Explanation: The first for loop runs n times. Then inside, another for loop runs n times. Add to it a for loop that runs twice as many as n times. But inside that one is a while loop that runs 1.5 times n times. So it would be n * (n + ((2 * n) * (1.5 * n))) which simplifies to n(n+(2n*1.5n))) which simplifies to n(n+(3n^2)) which we then drop the n+ and the 3* because it's not as important as the squares. So n(n^2) which is n^3.
