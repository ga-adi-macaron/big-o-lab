Problem 1:

func sumArray(var A as array of length n)
    var sum as int = 0
    for i from 0 to n - 1
        sum += A[i]
    return sum
end func

Running time: O(n)
Explanation: This a linear complexity. There is one loop through the data so the worst case would be to have to go through every element of the array.

----------------------------------------------------------------

Problem 2:

func sumMatrix(var A as n x n matrix) // A matrix can be represented as an array of arrays, from A[0][0] to A[n][n]
    var sum as int = 0
    for i from 0 to n - 1
        sum += sumArray(A[i])
    return sum
end func

Running time: O(n^2)
Explanation: There is a nested loop here. For each element in the array or arrays, we iterate over arrays themselve.

----------------------------------------------------------------

Problem 3:

func countDivisionsByTwo(var n as int)
    var count as int = 0
    var i as int = n
    while i >= 1
        count++
        i = i / 2
    return count
end func

Running time: O(log n)
Explanation: The distance from n to 1 is halved with each iteration. As opposed to walking down to one in a linear fashion.

----------------------------------------------------------------

Problem 4:

func arrayMax(var A as array of length n)
    var currentMax as int = A[0]
    for i from 0 to n - 1
        if A[i] > currentMax then
            currentMax = A[i]
    return currentMax
end func

Running time: O(n)
Explanation: Given an array, loop through the array once. As n grows, the time it takes to loop through the arrays grows proportionally.

----------------------------------------------------------------

***BONUS*** Problem 5:

func bonusFunction(var n as int)
    var total as int = 0
    for i from 1 to n
        for j from 1 to n
            total += 1
        for k from 1 to 2 * n
            total += 1
            var m as int = 0
            while (m < 3 * n)
                total += 1
                m += 2
    return total
end func

Running time: O(n(n+2n(3/2n))) = O(n^3 + n^2) = O(n^3)
Explanation: The loops in this method run three teirs deep. The worst case-simplified version would be n^3.
